from skills.communication import Communication
from skills.memory.memory_skill import MemorySkill
from tools.llm_wrapper import LLMWrapper
from skills.communication.messages import Message

class BaseAgent:
    def __init__(self, name, role, skills=None, verbose=False, communication=None, llm=None):
        self.name = name
        self.role = role  # Instance de BaseRole ou d√©riv√©e
        self.verbose = verbose

        # Interface LLM (inject√©e ou cr√©√©e)
        self.llm = llm if llm is not None else LLMWrapper(agent=self, verbose=verbose)

        # M√©moire compl√®te (short + long + m√©moire imm√©diate)
        self.init_memory()

        # Communication (skill) inject√©e ou par d√©faut
        self.communication = communication if communication is not None else Communication(verbose=verbose)

        # File d'attente de messages entrants
        self.messages = []

        # Ensemble des skills
        self.skills = skills if skills is not None else []
        self.skills += self.init_default_skills()

        if self.verbose:
            print(f"[Init] Agent {self.name} initialis√© avec le r√¥le {self.role.name}")

    def init_default_skills(self):
        """Ajoute les skills indispensables √† tout agent."""
        return [self.communication, self.memoire]

    def receive_message(self, message):
        """Ajoute un message √† la file d'attente."""
        self.messages.append(message)
        if self.verbose:
            print(f"[{self.name}] Message re√ßu : {message}")

    def process_messages(self):
        """Traite tous les messages en attente via les skills disponibles."""
        while self.messages:
            message = self.messages.pop(0)

            if message.origine == self.name and message.type_message == "llm_response":
                if self.verbose:
                    print(f"[{self.name}] ‚è© Auto-r√©ponse ignor√©e.")
                continue

            if self.verbose:
                print(f"[{self.name}] Traitement du message : {message}")

            # 1. üß† Enregistrer le message entrant s‚Äôil doit √™tre m√©moris√©
            if getattr(message, "memoriser", True):
                self.memoire.save_interaction(message)

            # 2. üß† Actualiser la m√©moire court terme
            self.memoire.update_short_term([message])

            # 3. üß† Contexte m√©moire pour g√©n√©ration
            working_context = self.memoire.compose_working_memory()
            prompt = f"{self.get_prompt_context()}\n\n{working_context}\n\nMessage re√ßu : {message.contenu}"

            # 4. üß† G√©n√©ration via LLM
            if hasattr(self.llm, "ask"):
                raw_response = self.llm.ask(prompt)
                contenu = getattr(raw_response, "contenu", str(raw_response))
            elif hasattr(self.llm, "query"):
                contenu = self.llm.query(prompt)
            else:
                contenu = "[ERREUR: aucun LLM compatible]"

            if self.verbose:
                print(f"[{self.name}] R√©ponse g√©n√©r√©e : {contenu}")

            # 5. üí¨ Cr√©er un message de r√©ponse
            response_msg = Message(
                origine=self.name,
                destinataire=message.origine,
                type_message="llm_response",
                contenu=contenu,
                dialogue=True,
                memoriser=True,
                meta={"reponse_a": message.id}
            )

            # 6. üß† Enregistrement m√©moire de la r√©ponse
            self.memoire.save_interaction(response_msg)

            # 7. üì® Envoi via communication
            self.communication.send(response_msg)

    def get_prompt_context(self):
        """R√©cup√®re le prompt de r√¥le (peut √™tre enrichi avec de la m√©moire externe si besoin)."""
        return self.role.get_prompt()

    @property
    def objectif(self):
        return getattr(self.role, "objectif", None)

    def __repr__(self):
        return f"<Agent {self.name} - R√¥le: {self.role.name}>"

    def init_memory(self, base_path: str = "agent_memories", reuse: bool = False):
        """
        R√©initialise la m√©moire de l'agent avec des options sp√©cifiques.
        Si reuse=True, recharge la derni√®re m√©moire existante.
        """
        from skills.memory.memory_skill import MemorySkill
        if reuse:
            from skills.memory.long_term import LongTermMemory
            path = LongTermMemory(self.name, base_path=base_path, reuse=True).memory_path
            self.memoire = MemorySkill(
                agent_name=self.name,
                llm=self.llm,
                base_path=path,
                verbose=self.verbose
            )
        else:
            self.memoire = MemorySkill(
                agent_name=self.name,
                llm=self.llm,
                base_path=base_path,
                verbose=self.verbose
            )
